# Import python packages
import streamlit as st
import pandas as pd
import numpy as np
import altair as alt

# connect to snowflake
conn = st.connection("snowflake")

# Page Parameters
st.header("Giving Forecast Report")

# GET FILTERS
filter_years = conn.query('''
    SELECT
        DISTINCT DONATION_YEAR as YEAR,
    FROM ANALYTICS.ANALYTICAL_GIVING

''', ttl=0)

filter_pcs = conn.query('''
    SELECT
        DISTINCT PRIMARY_CAMPUS as PRIMARY_CAMPUS,
    FROM ANALYTICS.ANALYTICAL_GIVING

''', ttl=0)

fct_explaination_string = '''
The giving forecast report shows the expected sum of donations for the current year.

These forecasts are generated by AI models at the primary campus level.

To ensure your church's forecasts are as accurate as possible, please assign all donors to a campus when appropriate!

While AI models have shown to be useful in forecasting, please note that these forecasts are probabalistic and cannot foresee future events that may affect your church's donor patterns. Use this data with care and caution. 
'''
with st.expander("Click to Learn More"):
    st.write(fct_explaination_string)


max_year = max([int(item.strip()) for item in filter_years])

forecasts_df = conn.query(f'''
SELECT 
      DONATION_YEAR as "Year",
      DONATION_MONTH as "Month",
      DONATION_WEEK as "Week",
      RECEIVED_AT as "Date",
      PRIMARY_CAMPUS as "Primary Campus",
      ACTUAL as "Actual",
      FORECAST as "Forecast",
      LOWER_BOUND as "Lower Bound",
      UPPER_BOUND as "Upper Bound" 
  FROM ANALYTICS.GIVING_FORECASTS_REPORT 
  WHERE YEAR(RECEIVED_AT) <= {max_year} AND 
  YEAR(RECEIVED_AT) >= {max_year}''', ttl=0)

    
filter_col, col2 = st.columns([.30, .7])

fct_giving_pc_sel = filter_col.multiselect(
            'Select Forecast By Primary Campus',
            options = pd.unique(forecasts_df['Primary Campus']),
            default = pd.unique(forecasts_df['Primary Campus']),
        )


forecasts_df_sel = forecasts_df.query('`Primary Campus`==@fct_giving_pc_sel')


overview_df = forecasts_df_sel.groupby(['Year', 'Month', 'Week', 'Date'])[['Actual', 'Forecast']].sum().reset_index()
overview_df = pd.melt(overview_df, id_vars=['Year', 'Month', 'Week', 'Date'], value_vars=['Actual', 'Forecast'], value_name='Donations', var_name = 'Type')

overview_df['Label'] = overview_df['Year'].astype(str) + " - " + overview_df['Type']

overview_df = overview_df[(overview_df['Label'] != f'{max_year-1} - Forecast')]

# trend visuals
ytd_col, forecasted_col, yoy_col = st.columns(3)

ytd_col.metric(
    label=f'YTD Giving - {max_year}',
    value= '${:,}'.format(np.round(overview_df[(overview_df['Type'] == 'Actual') & (overview_df['Year'] == max_year)]['Donations'].sum(),2)),
    delta_color="off"
)

forecasted_col.metric(
    label= f'Forecasted Year End Donations - {max_year}',
    value= '${:,}'.format(np.round(overview_df[overview_df.Year == max_year].Donations.sum(),0))
)

yoy_col.metric(
    label='Forecast Y/Y Growth',
    value= f"{np.round(((overview_df[overview_df.Year == max_year].Donations.sum()) - (overview_df[overview_df.Year == max_year-1].Donations.sum()))/ (overview_df[overview_df.Year == max_year-1].Donations.sum()) * 100,2)}%",
)


yoy_w_tab, yoy_m_tab, trend_tab = st.tabs(['Forecasted Year/Year By Week', 'Forecasted Year/Year By Month', 'Forecasted Giving Trend'])

with yoy_w_tab: 
    st.bar_chart(
        data = overview_df.groupby(['Label', 'Week'])['Donations'].sum().reset_index(),
        x = 'Week',
        y = 'Donations',
        color = "Label")

with yoy_m_tab:
    st.bar_chart(
        data = overview_df.groupby(['Label', 'Month'])['Donations'].sum().reset_index(),
        x = 'Month',
       y = 'Donations',
        color = 'Label')

with trend_tab:
    st.bar_chart(
        data = overview_df.groupby(['Date', 'Type'])['Donations'].sum().reset_index(),
        x = 'Date',
        y = 'Donations',
        color='Type'
    ) 
